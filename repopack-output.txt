================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-09-07T10:26:42.268Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
app/
  dashboard/
    page.tsx
  journal/
    page.tsx
  sign-in/
    [[...sign-in]]/
      page.tsx
  sign-up/
    [[...sign-up]]/
      page.tsx
  app-layout.tsx
  globals.css
  layout.tsx
  page.tsx
components/
  ui/
    avatar.tsx
    badge.tsx
    button.tsx
    card.tsx
    input.tsx
    scroll-area.tsx
    tabs.tsx
  grow-journal.tsx
  Header.tsx
  src-app-dashboard-page.tsx
lib/
  utils.ts
.eslintrc.json
.gitignore
components.json
middleware.ts
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: app/dashboard/page.tsx
================
'use client'

import Image from 'next/image'
import Link from 'next/link'
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter } from "@/components/ui/card"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Home, BookOpen, Camera, HelpCircle, Trophy, Users, Leaf, Dna, Droplet, Lightbulb, Tent, Globe, Plus, Bell } from 'lucide-react'
import { UserButton, useUser } from "@clerk/nextjs"

const growthStages = ['All', 'Indoor', 'Outdoor', 'Vegetation', 'Flowering', 'Harvested']
const shorts = ["24 Overdosin'", "Gelato Auto", "Auto Flower Blue Perched Soda", "Auto Northern Lights", "Orange Sherbet Auto LED", "RQS Hulkberry Auto"]
const following = [
  { name: "Fast Buds", followers: "28K+" },
  { name: "Liberty H...", followers: "28K+" },
  { name: "Sweet Se...", followers: "28K+" },
  { name: "ViperSpec...", followers: "27K+" },
  { name: "Barney's", followers: "26K+" },
  { name: "Mimosa E...", followers: "26K+" },
  { name: "Gorilla Zk...", followers: "26K+" },
  { name: "Runtz Mu...", followers: "26K+" },
  { name: "Triple Che...", followers: "22K+" },
  { name: "Wedding ...", followers: "18K+" },
  { name: "Sour_D", followers: "54" },
  { name: "Drgreen13", followers: "23" },
  { name: "MR_Roof_K93", followers: "22" },
]

const sidebarItems = [
  { name: "Home", icon: Home },
  { name: "Diaries", icon: BookOpen },
  { name: "Shorts", icon: Camera },
  { name: "Questions", icon: HelpCircle },
  { name: "Contests", icon: Trophy },
  { name: "Growers", icon: Users },
  { name: "Strains", icon: Leaf },
  { name: "Breeders", icon: Dna },
  { name: "Nutrients", icon: Droplet },
  { name: "Lights", icon: Lightbulb },
  { name: "Tents", icon: Tent },
  { name: "Blog", icon: BookOpen },
  { name: "English", icon: Globe },
]

export default function Dashboard() {
  const { user } = useUser();

  return (
    <div className="flex h-screen bg-background">
      <aside className="w-64 bg-card border-r">
        <ScrollArea className="h-full">
          <div className="p-4 space-y-4">
            {sidebarItems.map((item) => (
              <Link key={item.name} href="#" className="flex items-center space-x-2 text-sm hover:bg-accent hover:text-accent-foreground rounded p-2">
                <item.icon className="h-4 w-4" />
                <span>{item.name}</span>
              </Link>
            ))}
            <div className="pt-4 border-t">
              <h3 className="font-semibold mb-2">Following</h3>
              {following.map((item) => (
                <div key={item.name} className="flex items-center justify-between text-sm py-1">
                  <span>{item.name}</span>
                  <span className="text-muted-foreground">{item.followers}</span>
                </div>
              ))}
            </div>
          </div>
        </ScrollArea>
      </aside>
      <main className="flex-1 overflow-auto">
        <header className="border-b sticky top-0 bg-background z-10">
          <div className="container mx-auto px-4 py-2 flex items-center justify-between">
            <div className="flex-1 max-w-md">
              <Input type="search" placeholder="Search Diaries" className="w-full" />
            </div>
            <div className="flex items-center space-x-2">
              <Button variant="ghost" size="icon">
                <Plus className="h-5 w-5" />
                <span className="sr-only">Add new</span>
              </Button>
              <Button variant="ghost" size="icon">
                <Bell className="h-5 w-5" />
                <span className="sr-only">Notifications</span>
              </Button>
              <UserButton afterSignOutUrl="/" />
            </div>
          </div>
        </header>
        <div className="container mx-auto px-4 py-8">
          <h1 className="text-2xl font-bold mb-4">Welcome, {user?.firstName || 'Grower'}!</h1>
          <Tabs defaultValue="all" className="mb-8">
            <TabsList>
              {growthStages.map((stage) => (
                <TabsTrigger key={stage} value={stage.toLowerCase()}>{stage}</TabsTrigger>
              ))}
            </TabsList>
          </Tabs>
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-8">
            {[...Array(8)].map((_, i) => (
              <Card key={i}>
                <CardContent className="p-0 relative">
                  <Image src={`https://placehold.jp/300x200.png`} alt={`Plant ${i + 1}`} width={300} height={200} className="w-full h-48 object-cover" />
                  <span className="absolute top-2 right-2 bg-red-500 text-white text-xs px-2 py-1 rounded">12 weeks</span>
                </CardContent>
                <CardFooter className="flex flex-col items-start p-4">
                  <h3 className="font-semibold mb-1">Plant Name {i + 1}</h3>
                  <p className="text-sm text-muted-foreground">Grower details...</p>
                  <div className="flex items-center mt-2 text-xs text-muted-foreground">
                    <span className="mr-2">2 days ago</span>
                    <span>23 comments</span>
                  </div>
                </CardFooter>
              </Card>
            ))}
          </div>
          <h2 className="text-2xl font-bold mb-4">Shorts</h2>
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">
            {shorts.map((short, i) => (
              <Card key={i}>
                <CardContent className="p-0">
                  <Image src={`https://placehold.jp/150x150.png`} alt={short} width={150} height={150} className="w-full h-36 object-cover" />
                </CardContent>
                <CardFooter className="p-2">
                  <p className="text-xs">{short}</p>
                </CardFooter>
              </Card>
            ))}
          </div>
        </div>
      </main>
    </div>
  )
}

================
File: app/journal/page.tsx
================
'use client'

import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Bell, Home, BookOpen, HelpCircle, Trophy, Users, Leaf, Dna, Beaker, Lightbulb, Tent } from "lucide-react"

export function GrowJournal() {
  return (
    <div className="flex h-screen bg-background">
      {/* Sidebar */}
      <aside className="w-64 border-r p-4 hidden md:block">
        <div className="flex items-center mb-6">
          <Leaf className="h-6 w-6 text-green-600 mr-2" />
          <span className="text-xl font-bold">growdiaries</span>
        </div>
        <nav className="space-y-2">
          {[
            { icon: Home, label: "Home" },
            { icon: BookOpen, label: "Diaries" },
            { icon: HelpCircle, label: "Questions" },
            { icon: Trophy, label: "Contests" },
            { icon: Users, label: "Growers" },
            { icon: Leaf, label: "Strains" },
            { icon: Dna, label: "Breeders" },
            { icon: Beaker, label: "Nutrients" },
            { icon: Lightbulb, label: "Lights" },
            { icon: Tent, label: "Tents" },
          ].map((item, index) => (
            <Button key={index} variant="ghost" className="w-full justify-start">
              <item.icon className="mr-2 h-4 w-4" />
              {item.label}
            </Button>
          ))}
        </nav>
      </aside>

      {/* Main content */}
      <main className="flex-1 overflow-y-auto">
        {/* Header */}
        <header className="border-b p-4 flex items-center justify-between">
          <Input className="max-w-sm" placeholder="gorilla cookies" />
          <div className="flex items-center space-x-4">
            <Button variant="ghost" size="icon">
              <Bell className="h-5 w-5" />
            </Button>
            <Avatar>
              <AvatarImage src="/placeholder-avatar.jpg" />
              <AvatarFallback>GD</AvatarFallback>
            </Avatar>
          </div>
        </header>

        {/* Content */}
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h1 className="text-3xl font-bold">Gorilla Zkittles 3x3</h1>
            <Button variant="outline">Settings</Button>
          </div>

          <div className="flex items-center space-x-2 mb-6">
            <Avatar className="h-6 w-6">
              <AvatarFallback>SM</AvatarFallback>
            </Avatar>
            <span className="font-medium">SOGMASTER</span>
            <Badge variant="outline" className="ml-2">Approved by Barney&apos;s Farm</Badge>
            <div className="flex items-center space-x-2 text-muted-foreground">
              <span>9</span>
              <span>56</span>
              <span>29</span>
              <span>3365</span>
              <span>2 years ago</span>
            </div>
          </div>

          <Card className="mb-6">
            <CardHeader>
              <CardTitle>Grow Details</CardTitle>
            </CardHeader>
            <CardContent className="flex flex-wrap gap-4">
              {["Gorilla Zkittlez", "Canna", "Plant Magic", "P2000", "70x70x160cm", "Indoor", "ScrOG", "SoG"].map((item, index) => (
                <Badge key={index} variant="secondary">{item}</Badge>
              ))}
            </CardContent>
          </Card>

          <Tabs defaultValue="weeks">
            <TabsList>
              <TabsTrigger value="weeks">WEEKS</TabsTrigger>
              <TabsTrigger value="strain">STRAIN</TabsTrigger>
            </TabsList>
            <TabsContent value="weeks">
              <div className="flex space-x-2 overflow-x-auto py-4">
                {[3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((week) => (
                  <Button key={week} variant={week === 3 ? "default" : "outline"} className="rounded-full">
                    {week}
                  </Button>
                ))}
              </div>
              <Card>
                <CardContent className="p-0">
                  <img src="/placeholder.svg" alt="Grow progress" className="w-full h-64 object-cover" />
                </CardContent>
              </Card>
            </TabsContent>
            <TabsContent value="strain">
              <Card>
                <CardContent>
                  <h3 className="text-lg font-semibold mb-2">Gorilla Zkittlez</h3>
                  <p className="text-muted-foreground">Strain information would go here...</p>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </main>
    </div>
  )
}

================
File: app/sign-in/[[...sign-in]]/page.tsx
================
import { SignIn } from "@clerk/nextjs";

export default function Page() {
  return <SignIn />;
}

================
File: app/sign-up/[[...sign-up]]/page.tsx
================
import { SignUp } from "@clerk/nextjs";

export default function Page() {
  return <SignUp />;
}

================
File: app/app-layout.tsx
================
'use client'

import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import {
  ClerkProvider,
  SignInButton,
  SignedIn,
  SignedOut,
  UserButton
} from '@clerk/nextjs'

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Grow Diary App",
  description: "Track and share your plant growing progress",
};

export function AppLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
          <header className="p-4 border-b">
            <div className="container mx-auto flex justify-between items-center">
              <h1 className="text-2xl font-bold">Grow Diary App</h1>
              <SignedOut>
                <SignInButton />
              </SignedOut>
              <SignedIn>
                <UserButton afterSignOutUrl="/" />
              </SignedIn>
            </div>
          </header>
          {children}
        </body>
      </html>
    </ClerkProvider>
  )
}

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: app/layout.tsx
================
import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import {
  ClerkProvider,
  SignInButton,
  SignedIn,
  SignedOut,
  UserButton
} from '@clerk/nextjs'

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});

const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Grow Diary App",
  description: "Track and share your plant growing progress",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
          <header className="p-4 border-b">
            <div className="container mx-auto flex justify-between items-center">
              <h1 className="text-2xl font-bold">Grow Diary App</h1>
              <SignedOut>
                <SignInButton />
              </SignedOut>
              <SignedIn>
                <UserButton afterSignOutUrl="/home" />
              </SignedIn>
            </div>
          </header>
          {children}
        </body>
      </html>
    </ClerkProvider>
  )
}

================
File: app/page.tsx
================
import Image from 'next/image'
import { Card, CardContent, CardFooter } from "@/components/ui/card"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import Header from '@/components/Header'

const growthStages = ['All', 'Indoor', 'Outdoor', 'Vegetation', 'Flowering', 'Harvested']
const shorts = ["Barney's Blue Sunset Sherbet", "First F1 Pineapple Express", "Sour Puffs", "Megh Sea Of Weed", "FastBuds Gorilla Zkittlez", "Powered by kinmen"]

export default function Home() {
  return (
    <div className="min-h-screen bg-background">
      <Header />

      <main className="container mx-auto px-4 py-8">
        <Tabs defaultValue="all" className="mb-8">
          <TabsList>
            {growthStages.map((stage) => (
              <TabsTrigger key={stage} value={stage.toLowerCase()}>{stage}</TabsTrigger>
            ))}
          </TabsList>
        </Tabs>

        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-8">
          {[...Array(8)].map((_, i) => (
            <Card key={i}>
              <CardContent className="p-0">
                <Image src={`/placeholder.svg?height=200&width=300&text=Plant ${i + 1}`} alt={`Plant ${i + 1}`} width={300} height={200} className="w-full h-48 object-cover" />
              </CardContent>
              <CardFooter className="flex flex-col items-start p-4">
                <h3 className="font-semibold mb-1">Plant Name {i + 1}</h3>
                <p className="text-sm text-muted-foreground">Growth details...</p>
              </CardFooter>
            </Card>
          ))}
        </div>

        <h2 className="text-2xl font-bold mb-4">Shorts</h2>
        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4 mb-8">
          {shorts.map((short, i) => (
            <Card key={i}>
              <CardContent className="p-0">
                <Image src={`/placeholder.svg?height=150&width=150&text=Short ${i + 1}`} alt={short} width={150} height={150} className="w-full h-36 object-cover" />
              </CardContent>
              <CardFooter className="p-2">
                <p className="text-xs">{short}</p>
              </CardFooter>
            </Card>
          ))}
        </div>

        <h2 className="text-2xl font-bold mb-4">Last Harvested</h2>
        <div className="grid grid-cols-2 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-4">
          {[...Array(8)].map((_, i) => (
            <Card key={i}>
              <CardContent className="p-0">
                <Image src={`/placeholder.svg?height=100&width=100&text=Harvest ${i + 1}`} alt={`Harvest ${i + 1}`} width={100} height={100} className="w-full h-24 object-cover" />
              </CardContent>
            </Card>
          ))}
        </div>
      </main>
    </div>
  )
}

================
File: components/ui/avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: components/ui/scroll-area.tsx
================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: components/ui/tabs.tsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: components/grow-journal.tsx
================
'use client'

import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Bell, Home, BookOpen, HelpCircle, Trophy, Users, Leaf, Dna, Beaker, Lightbulb, Tent } from "lucide-react"

export function GrowJournal() {
  return (
    <div className="flex h-screen bg-background">
      {/* Sidebar */}
      <aside className="w-64 border-r p-4 hidden md:block">
        <div className="flex items-center mb-6">
          <Leaf className="h-6 w-6 text-green-600 mr-2" />
          <span className="text-xl font-bold">growdiaries</span>
        </div>
        <nav className="space-y-2">
          {[
            { icon: Home, label: "Home" },
            { icon: BookOpen, label: "Diaries" },
            { icon: HelpCircle, label: "Questions" },
            { icon: Trophy, label: "Contests" },
            { icon: Users, label: "Growers" },
            { icon: Leaf, label: "Strains" },
            { icon: Dna, label: "Breeders" },
            { icon: Beaker, label: "Nutrients" },
            { icon: Lightbulb, label: "Lights" },
            { icon: Tent, label: "Tents" },
          ].map((item, index) => (
            <Button key={index} variant="ghost" className="w-full justify-start">
              <item.icon className="mr-2 h-4 w-4" />
              {item.label}
            </Button>
          ))}
        </nav>
      </aside>

      {/* Main content */}
      <main className="flex-1 overflow-y-auto">
        {/* Header */}
        <header className="border-b p-4 flex items-center justify-between">
          <Input className="max-w-sm" placeholder="gorilla cookies" />
          <div className="flex items-center space-x-4">
            <Button variant="ghost" size="icon">
              <Bell className="h-5 w-5" />
            </Button>
            <Avatar>
              <AvatarImage src="/placeholder-avatar.jpg" />
              <AvatarFallback>GD</AvatarFallback>
            </Avatar>
          </div>
        </header>

        {/* Content */}
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h1 className="text-3xl font-bold">Gorilla Zkittles 3x3</h1>
            <Button variant="outline">Settings</Button>
          </div>

          <div className="flex items-center space-x-2 mb-6">
            <Avatar className="h-6 w-6">
              <AvatarFallback>SM</AvatarFallback>
            </Avatar>
            <span className="font-medium">SOGMASTER</span>
            <Badge variant="outline" className="ml-2">Approved by Barney&apos;s Farm</Badge>
            <div className="flex items-center space-x-2 text-muted-foreground">
              <span>9</span>
              <span>56</span>
              <span>29</span>
              <span>3365</span>
              <span>2 years ago</span>
            </div>
          </div>

          <Card className="mb-6">
            <CardHeader>
              <CardTitle>Grow Details</CardTitle>
            </CardHeader>
            <CardContent className="flex flex-wrap gap-4">
              {["Gorilla Zkittlez", "Canna", "Plant Magic", "P2000", "70x70x160cm", "Indoor", "ScrOG", "SoG"].map((item, index) => (
                <Badge key={index} variant="secondary">{item}</Badge>
              ))}
            </CardContent>
          </Card>

          <Tabs defaultValue="weeks">
            <TabsList>
              <TabsTrigger value="weeks">WEEKS</TabsTrigger>
              <TabsTrigger value="strain">STRAIN</TabsTrigger>
            </TabsList>
            <TabsContent value="weeks">
              <div className="flex space-x-2 overflow-x-auto py-4">
                {[3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((week) => (
                  <Button key={week} variant={week === 3 ? "default" : "outline"} className="rounded-full">
                    {week}
                  </Button>
                ))}
              </div>
              <Card>
                <CardContent className="p-0">
                  <img src="/placeholder.svg" alt="Grow progress" className="w-full h-64 object-cover" />
                </CardContent>
              </Card>
            </TabsContent>
            <TabsContent value="strain">
              <Card>
                <CardContent>
                  <h3 className="text-lg font-semibold mb-2">Gorilla Zkittlez</h3>
                  <p className="text-muted-foreground">Strain information would go here...</p>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </main>
    </div>
  )
}

================
File: components/Header.tsx
================
'use client'

import Image from 'next/image'
import Link from 'next/link'
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { useAuth } from "@clerk/nextjs"

export default function Header() {
  const { isSignedIn } = useAuth()

  return (
    <header className="border-b">
      <div className="container mx-auto px-4 py-2 flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Image src="/placeholder.svg?height=40&width=40" alt="GrowDiaries logo" width={40} height={40} />
          <h1 className="text-2xl font-bold">GrowDiaries</h1>
        </div>
        <div className="flex-1 max-w-md mx-4">
          <Input type="search" placeholder="Search Diaries" className="w-full" />
        </div>
        <div className="flex items-center space-x-2">
          {isSignedIn ? (
            <Link href="/dashboard">
              <Button variant="outline">My Diary</Button>
            </Link>
          ) : (
            <>
              <Link href="/sign-in">
                <Button variant="ghost">Sign In</Button>
              </Link>
              <Link href="/sign-up">
                <Button>Sign Up</Button>
              </Link>
            </>
          )}
        </div>
      </div>
    </header>
  )
}

================
File: components/src-app-dashboard-page.tsx
================
'use client'

import Image from 'next/image'
import Link from 'next/link'
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter } from "@/components/ui/card"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Home, BookOpen, Camera, HelpCircle, Trophy, Users, Leaf, Dna, Droplet, Lightbulb, Tent, Globe, Plus, Bell } from 'lucide-react'

const growthStages = ['All', 'Indoor', 'Outdoor', 'Vegetation', 'Flowering', 'Harvested']
const shorts = ["24 Overdosin'", "Gelato Auto", "Auto Flower Blue Perched Soda", "Auto Northern Lights", "Orange Sherbet Auto LED", "RQS Hulkberry Auto"]
const following = [
  { name: "Fast Buds", followers: "28K+" },
  { name: "Liberty H...", followers: "28K+" },
  { name: "Sweet Se...", followers: "28K+" },
  { name: "ViperSpec...", followers: "27K+" },
  { name: "Barney's", followers: "26K+" },
  { name: "Mimosa E...", followers: "26K+" },
  { name: "Gorilla Zk...", followers: "26K+" },
  { name: "Runtz Mu...", followers: "26K+" },
  { name: "Triple Che...", followers: "22K+" },
  { name: "Wedding ...", followers: "18K+" },
  { name: "Sour_D", followers: "54" },
  { name: "Drgreen13", followers: "23" },
  { name: "MR_Roof_K93", followers: "22" },
]

const sidebarItems = [
  { name: "Home", icon: Home },
  { name: "Diaries", icon: BookOpen },
  { name: "Shorts", icon: Camera },
  { name: "Questions", icon: HelpCircle },
  { name: "Contests", icon: Trophy },
  { name: "Growers", icon: Users },
  { name: "Strains", icon: Leaf },
  { name: "Breeders", icon: Dna },
  { name: "Nutrients", icon: Droplet },
  { name: "Lights", icon: Lightbulb },
  { name: "Tents", icon: Tent },
  { name: "Blog", icon: BookOpen },
  { name: "English", icon: Globe },
]

export function SrcAppDashboardPage() {
  return (
    <div className="flex h-screen bg-background">
      <aside className="w-64 bg-card border-r">
        <ScrollArea className="h-full">
          <div className="p-4 space-y-4">
            {sidebarItems.map((item) => (
              <Link key={item.name} href="#" className="flex items-center space-x-2 text-sm hover:bg-accent hover:text-accent-foreground rounded p-2">
                <item.icon className="h-4 w-4" />
                <span>{item.name}</span>
              </Link>
            ))}
            <div className="pt-4 border-t">
              <h3 className="font-semibold mb-2">Following</h3>
              {following.map((item) => (
                <div key={item.name} className="flex items-center justify-between text-sm py-1">
                  <span>{item.name}</span>
                  <span className="text-muted-foreground">{item.followers}</span>
                </div>
              ))}
            </div>
          </div>
        </ScrollArea>
      </aside>
      <main className="flex-1 overflow-auto">
        <header className="border-b sticky top-0 bg-background z-10">
          <div className="container mx-auto px-4 py-2 flex items-center justify-between">
            <div className="flex-1 max-w-md">
              <Input type="search" placeholder="Search Diaries" className="w-full" />
            </div>
            <div className="flex items-center space-x-2">
              <Button variant="ghost" size="icon">
                <Plus className="h-5 w-5" />
                <span className="sr-only">Add new</span>
              </Button>
              <Button variant="ghost" size="icon">
                <Bell className="h-5 w-5" />
                <span className="sr-only">Notifications</span>
              </Button>
              <Button variant="ghost" size="icon">
                <Image src="https://placehold.jp/32x32.png" alt="User avatar" width={32} height={32} className="rounded-full" />
              </Button>
            </div>
          </div>
        </header>
        <div className="container mx-auto px-4 py-8">
          <Tabs defaultValue="all" className="mb-8">
            <TabsList>
              {growthStages.map((stage) => (
                <TabsTrigger key={stage} value={stage.toLowerCase()}>{stage}</TabsTrigger>
              ))}
            </TabsList>
          </Tabs>
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-8">
            {[...Array(8)].map((_, i) => (
              <Card key={i}>
                <CardContent className="p-0 relative">
                  <Image src={`https://placehold.jp/300x200.png`} alt={`Plant ${i + 1}`} width={300} height={200} className="w-full h-48 object-cover" />
                  <span className="absolute top-2 right-2 bg-red-500 text-white text-xs px-2 py-1 rounded">12 weeks</span>
                </CardContent>
                <CardFooter className="flex flex-col items-start p-4">
                  <h3 className="font-semibold mb-1">Plant Name {i + 1}</h3>
                  <p className="text-sm text-muted-foreground">Grower details...</p>
                  <div className="flex items-center mt-2 text-xs text-muted-foreground">
                    <span className="mr-2">2 days ago</span>
                    <span>23 comments</span>
                  </div>
                </CardFooter>
              </Card>
            ))}
          </div>
          <h2 className="text-2xl font-bold mb-4">Shorts</h2>
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">
            {shorts.map((short, i) => (
              <Card key={i}>
                <CardContent className="p-0">
                  <Image src={`https://placehold.jp/150x150.png`} alt={short} width={150} height={150} className="w-full h-36 object-cover" />
                </CardContent>
                <CardFooter className="p-2">
                  <p className="text-xs">{short}</p>
                </CardFooter>
              </Card>
            ))}
          </div>
        </div>
      </main>
    </div>
  )
}

================
File: lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}

================
File: middleware.ts
================
import { clerkMiddleware } from "@clerk/nextjs/server";

export default clerkMiddleware();

export const config = {
  matcher: [
    // Skip Next.js internals and all static files, unless found in search params
    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
    // Always run for API routes
    '/(api|trpc)(.*)',
  ],
};

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'placehold.jp',
      },
    ],
  },
}

export default nextConfig

================
File: package.json
================
{
  "name": "shadcn-init",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@clerk/nextjs": "^5.4.1",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "lucide-react": "^0.439.0",
    "next": "14.2.8",
    "react": "^18",
    "react-dom": "^18",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/node": "^20.16.5",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.2.8",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.5.4"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};
export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
